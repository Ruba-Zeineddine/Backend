import json
import hashlib
import boto3
from datetime import datetime

region = 'eu-west-2'
dynamodb = boto3.resource('dynamodb', region_name=region)

def update_password(tablename, email, new_password):
    hash_object = hashlib.sha256()
    hash_object.update(new_password.encode())
    hashed_password = hash_object.hexdigest()
    
    ddb = dynamodb.Table(tablename)
    res = ddb.update_item(
        Key={
            'email': email
        },
        UpdateExpression='SET password = :password',
        ExpressionAttributeValues={
            ':password': hashed_password
        },
        ReturnValues='UPDATED_NEW'
    )
    
    return res

def verify_token(token_table, token):
    ddb = dynamodb.Table(token_table)
    response = ddb.scan(
        FilterExpression='#t = :token',
        ExpressionAttributeNames={'#t': 'token'},
        ExpressionAttributeValues={':token': token}
    )
    
    items = response.get('Items', [])
    if not items:
        return False
    
    item = items[0]
    expiration_time = datetime.fromisoformat(item['expiration_time'])
    if datetime.utcnow() > expiration_time:
        return False
    
    return item.get('email')

def lambda_handler(event, context):
    print("Received event:", json.dumps(event))
    
    if 'httpMethod' in event:
        if event['httpMethod'] == 'OPTIONS':
            return {
                "statusCode": 200,
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                },
                "body": json.dumps("CORS preflight")
            }
    
    try:
        body = json.loads(event.get('body', '{}'))
        token = body['token']
        new_password = body['newPassword']
        
        # Verify the token
        email = verify_token('password-reset-tokens', token)
        if not email:
            return {
                "statusCode": 400,
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                },
                "body": json.dumps({"error": "Invalid or expired token"})
            }
        
        # Update the password
        update_password('user-table', email, new_password)
        
        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
            },
            "body": json.dumps("Password successfully updated")
        }
    except Exception as e:
        print(f"Error processing request: {e}")
        return {
            "statusCode": 400,
            "headers": {
                "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
            },
            "body": json.dumps({"error": str(e)})
        }
