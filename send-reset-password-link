import json
import hashlib
import boto3
import uuid
from datetime import datetime, timedelta

# Initialize AWS clients
region = 'eu-west-2'
dynamodb = boto3.resource('dynamodb', region_name=region)
ses = boto3.client('ses', region_name=region)

# Function to generate a secure token
def generate_token():
    return str(uuid.uuid4())

# Function to save the reset token in DynamoDB
def save_token(tablename, email, token):
    expiration_time = datetime.utcnow() + timedelta(hours=1)  # Token valid for 1 hour
    ddb = dynamodb.Table(tablename)
    ddb.put_item(
        Item={
            'email': email,
            'token': token,
            'expiration_time': expiration_time.isoformat()
        }
    )

# Function to send the email
def send_email(email, token):
    reset_link = f"https://main.dq3n4ultlpkag.amplifyapp.com/PasswordReset?token={token}"
    response = ses.send_email(
        Source='Mealmission@outlook.com',
        Destination={
            'ToAddresses': [email],
        },
        Message={
            'Subject': {
                'Data': 'Password Reset Request',
            },
            'Body': {
                'Text': {
                    'Data': f'Click the following link to reset your password: {reset_link}',
                },
            },
        },
    )
    return response

def lambda_handler(event, context):
    print("Received event:", json.dumps(event))

    if 'httpMethod' in event:
        if event['httpMethod'] == 'OPTIONS':
            return {
                "statusCode": 200,
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                },
                "body": json.dumps("CORS preflight")
            }
    
    try:
        body = json.loads(event.get('body', '{}'))
        email = body['email']  # Ensure the email is included in the body

        # Generate a reset token and save it
        token = generate_token()
        save_token('password-reset-tokens', email, token)

        # Send the reset link via email
        send_email(email, token)

        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
            },
            "body": json.dumps("Password reset link has been sent to your email.")
        }
    except Exception as e:
        print(f"Error processing request: {e}")
        return {
            "statusCode": 400,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
            },
            "body": json.dumps({"error": str(e)})
        }
