import json
import uuid
import boto3
import base64

region = 'eu-west-2'
dynamodb = boto3.resource('dynamodb', region_name=region)
s3 = boto3.client('s3')
bucket_name = 'food-donation-picture'

def upload_image_to_s3(image_data: str, donation_id: str):
    try:
        image_binary = base64.b64decode(image_data)
        s3_key = f'donations/{donation_id}/image.png'
        s3.put_object(
            Bucket=bucket_name,
            Key=s3_key,
            Body=image_binary,
            ContentType='image/png'
        )
        return f'https://{bucket_name}.s3.{region}.amazonaws.com/{s3_key}'
    except Exception as e:
        print(f"Error uploading image: {e}")
        return None

def insert_dynamoDB_items(tablename: str, donationID: str, foodtype: str, expirationDate: str, quantity: str, description: str, donorName: str, emailofDonor: str, image_url: str,donorPhoneNumber: str):
    try:
        ddb = dynamodb.Table(tablename)
        ddb.put_item(
            Item={
                'donationID': donationID,
                'foodtype': foodtype,
                'expirationDate': expirationDate,
                'quantity': quantity,
                'description': description,
                'donorName': donorName,  # Add donorName here
                'emailofDonor': emailofDonor,
                'donation-picture': image_url,
                'donorPhoneNumber':donorPhoneNumber,
                'status':'available'
                
            }
        )
        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT"
            },
            "body": json.dumps({
                "message": "Success",
                "donationID": donationID})
        }
    except Exception as e:
        print(f"Error inserting item into DynamoDB: {e}")
        return {
            "statusCode": 500,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT"
            },
            "body": json.dumps({"error": str(e)})
        }

def lambda_handler(event, context):
    if event.get('httpMethod') == 'OPTIONS':
        return {
            "statusCode": 200,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT"
            },
            "body": json.dumps("CORS preflight")
        }

    try:
        body = json.loads(event.get('body', '{}'))
        donationID = str(uuid.uuid4())
        foodtype = body.get('foodtype')
        expirationDate = body.get('expirationDate')
        quantity = body.get('quantity')
        description = body.get('description', '')
        donorName = body.get('donorName')  # Add donorName here
        donorPhoneNumber=body.get('donorPhoneNumber')
        emailofDonor = body.get('emailofDonor')
        image_data = body.get('image')

        if not all([foodtype, expirationDate, quantity, donorName, emailofDonor, image_data,donorPhoneNumber]):
            raise ValueError("Missing required fields")

        image_url = upload_image_to_s3(image_data, donationID)
        if not image_url:
            return {
                "statusCode": 500,
                "headers": {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT"
                },
                "body": json.dumps("Failed to upload image")
            }

        return insert_dynamoDB_items('donation-table', donationID, foodtype, expirationDate, quantity, description, donorName, emailofDonor, image_url,donorPhoneNumber)
    except Exception as e:
        print(f"Error processing request: {e}")
        return {
            "statusCode": 400,
            "headers": {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT"
            },
            "body": json.dumps({"error": str(e)})
        }
